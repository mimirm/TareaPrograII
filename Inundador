public class Inundador{
    public static final int [] SUMA_F = { -1,-1, 0, 1, 1, 1, 0,-1 };
    public static final int [] SUMA_C = {  0, 1, 1, 1, 0,-1,-1,-1 };

    public static final int [][] imagen = {{2,2,2,2,2},{2,2,3,3,2},{2,3,5,3,2},{2,2,3,3,2},{2,2,3,2,2},{2,2,2,2,2},{2,7,7,7,2},{2,2,7,7,2},{2,2,7,2,2},{2,2,2,2,2}};

    //Para que no se salga de la matriz
    public boolean direccionValida(int f, int c, int d, int[][] matriz){
        return (matriz != null) && posicionValida(f+SUMA_F[d], c+SUMA_C[d], matriz);
    }

    public boolean posicionValida(int f, int c, int[][]matriz){
        return (matriz != null) && (f >= 0) && (f < matriz.length) && (c >= 0) && (c < matriz[f].length);
    }
    //Para ver si ya le preguntaron 
    public boolean inundado(int f, int c, int[][] control){
        return posicionValida( f, c, control) && (control[f][c] != Analizador.VACIO);
    }

    //Metodo recursivo que inunda segun los colores que se quieren
    //Direcciones 1 para todas las direcciones, 2 para el fondo
    private void inundarR(int f, int c, int[][] imagen, int[][] control, int colorI, int colorF, int direcciones){
        if( posicionValida( f, c, imagen ) && !inundado( f, c, control ) && (imagen[f][c] == colorI) ){
            control[f][c] = Analizador.BORDE;
            for(int d = 0; d < 8; d +=direcciones){
                if( direccionValida( f, c, d, imagen ) ){
                    inundarR(f+SUMA_F[d], c+SUMA_C[d], imagen, control, colorI, colorF, direcciones);
                }
            }
        }
      }
     
    //Metodo que importa
    //Es de donde se inicia la vara recursiva
    public void inundar (int[][]imagen, int[][] control, int aBuscar,int aCambiar, int direcciones){
        inundarR(0,0, imagen, control, aBuscar, aCambiar, direcciones);
        
    }

    public String toString(int[][] matriz){
        String tira = "";
        for(int f = 0; f< matriz.length; ++f){
            for(int c = 0; c< matriz[0].length; ++c ){
                tira += "\t" + matriz[f][c];
            }
            tira += "\n";
        }
        return tira;
    }
}
