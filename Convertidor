 /* Esta clase recibe la imagen principal y la convierte en una matriz 
  * con valores específicos
 *   
 *  
 */

import javax.swing.*;
public class Convertidor{
    private int [][] original;
    private int [][] lienzo;
    private String entrada;
    private Imagen i;
    public static final int [] SUMA_F = {-1,-1, 0, 1, 1, 1, 0,-1 };
    public static final int [] SUMA_C = {0, 1, 1, 1, 0,-1,-1,-1 };
    private int fondo, figuras, cont;
    public Convertidor(String nombreImagen) {// ponerle argumento 
        if(nombreImagen == ""){
            entrada = "miniFacil1.gif";
        }
        else{
            entrada = nombreImagen;
        }
        i = new Imagen(entrada);
        i.dibujar();
        original = i.getMatriz();
        fondo = original[0][0];
        lienzo = new int [original.length] [original[0].length];
        for (int f = 0; f < lienzo.length; ++f){
            for(int c = 0; c < lienzo[0].length; ++c){
                lienzo[f][c] = -1;
            }
        } 
        figuras = 0;
        cont= 0;
    }
    
    /*
     * @Función: verifica que la poscion de la matriz lienzo sea valida
     * recibe la posicion exacta
     * devuelve un boolean informando si es valida o no
     * 
     * 
     *  
     *  
     */

    public boolean esValida(int f,int c){
        return original!=null && f >=0 && f < original.length && original[f]!=null && c >=0 && c < original[f].length;
    }

     /* @Funcion recorre la imagen y le da un valor específico a cada elemento de la imagen (fondo, borde, etc)
 *  
 * 
 * 
 *  
 *  
 */
    
    public void recorrerImagen(){
        boolean buscar = true;
        int borde;
        for (int o = 0; o < original.length ; ++o){
            for(int c = 0; c < original[o].length ; ++c){ 
                if (original[o][c] == fondo && buscar){
                    detectarFondo(o,c);
                    buscar = false;
                }
                if (lienzo[o][c] == -1){
                    if ( buscarAlrededor(o,c,-2,lienzo) ){
                        lienzo[o][c] = -3;
                        borde = original[o][c];
                        buscarVecinos(o,c,borde, -3);
                        ++figuras;
                    }
                    else{
                        if(buscarAlrededor(o,c,-3,lienzo)){
                            lienzo[o][c] = -4;
                            borde = original[o][c];
                            buscarVecinos(o,c,borde,-4);

                        }
                        else {
                            lienzo[o][c] = -5;
                            borde = original[o][c];
                            buscarVecinos(o,c,borde,-5);
                        }
                    }
                }
            } 
        }
    }
     /* @Funcion encuentra las manchas en la imagen de manera recursiva
      * recibe la posicion donde se desea buscar y el color del que se desea pintar la mancha'
 *  
 * 
 * 
 *  
 *  
 */

    private void buscarManchas (int f, int c, int fondo){
        for (int o = 0; o < 8 ; ++o){
            if(esValida(f + SUMA_F[o],c + SUMA_C[o]) && original[f + SUMA_F[o]][c + SUMA_C[o]] != fondo && lienzo[f + SUMA_F[o]][c + SUMA_C[o]] == -1 ){
                lienzo[f + SUMA_F[o]][c + SUMA_C[o]] = 3; 
                buscarManchas(f + SUMA_F[o], c + SUMA_C[o],fondo);
            }
        }
    }    
    
     /* @Funcion encuentra el fondo de la imagen de manera recursiva
      * recibe la primera poscion de la matriz de la imagen
 *  
 * 
 * 
 *  
 *  
 */

    private void detectarFondo(int f, int c){
        for (int o = 0; o < 8 ; o += 2){
            if (esValida(f + SUMA_F[o],c + SUMA_C[o]) && original[f + SUMA_F[o]][c + SUMA_C[o]] == original[f][c] && lienzo[f + SUMA_F[o]][c + SUMA_C[o]] == -1){
                lienzo[f + SUMA_F[o]][c + SUMA_C[o]] = -2;
                detectarFondo(f + SUMA_F[o], c + SUMA_C[o]);
            }
        }
    }
    
     /* @Funcion busca todos los elementos vecino iguales de un punto de la imagen de manera recursiva
      * recibe el punto exacto, el color de este y que numero desea poner en la nueva matriz
 *  
 * 
 * 
 *  
 *  
 */

    private void buscarVecinos (int f, int c, int borde, int color){
        for (int o = 0; o < 8 ; ++o){
            if(original[f + SUMA_F[o]][c + SUMA_C[o]] == borde && lienzo[f + SUMA_F[o]][c + SUMA_C[o]] == -1 ){
                lienzo[f + SUMA_F[o]][c + SUMA_C[o]] = color;
                buscarVecinos(f + SUMA_F[o], c + SUMA_C[o],borde,color);
            }
        }
    }    
    
     /* @Funcion busca en un punto de una matriz especifica si hay alrededor de el un numero especifico 
      * recibe la posicion de donde se desea buscar, el color que esta buscando y la matriz en la que se busca
      * devuelve un booleando indicando si encontro o el numero
 *  
 * 
 * 
 *  
 *  
 */

    public boolean buscarAlrededor (int f, int c, int buscado,  int[][] ma){
        boolean hay = false;
        for (int o = 0; o < 8 ; o+=2){
            if(ma[f + SUMA_F[o]][c + SUMA_C[o]] == buscado ){
                hay = true;
            }
        }
        return hay;
    }
     /* @Funcion imprime una matriz
      * recibe la matriz a imprimir
 *  
 * 
 * 
 *  
 *  
 */

    public void toString(int[][] matriz){
        for(int f = 0; f < matriz.length; f++){
            for(int c = 0; c < matriz[f].length; c++){
                System.out.print(" "+matriz[f][c]); 
            } 
            System.out.println("");
        }
    }

    public int getFiguras(){
        return figuras;
    }

    public int [][] getLienzo (){
        return lienzo;
    }

    public int [][] getOriginal (){
        return original;
        
    }
 /* @Funcion ejecuta el metodo recorrerImagen, (es por comodidad, para llamar a run en vez de recorrerImagen)
 *  
 * 
 * 
 *  
 *  
 */
    public void run(){
        recorrerImagen();
    }
}
