/*
 * Esta clase es la encargada de recortar las matrices pintadas segun 
 * las dimensiones mas grandes del inventario
 */
public class Recortador{
    public static final int [] SUMA_F = { -1,-1, 0, 1, 1, 1, 0,-1 };
    public static final int [] SUMA_C = {  0, 1, 1, 1, 0,-1,-1,-1 };
    private Inventario inventario;
    private int filasMayor, columnasMayor;

    public Recortador (Inventario inventario){
        this.inventario = inventario;
        filasMayor = findFilasMayor();
        columnasMayor = findColumnasMayor();
        System.out.println(filasMayor);
        System.out.println(columnasMayor);
    }

    /*
     *  @Funcion: Recorre el inventario y saca el ancho mayor. Lo vuelve impar y suma dos
     *  para que las futuras matrices tengan fondo de imagen.
     *  @Return: Entero que refleja la dimencion en x de las futuras matrices recortadas.
     */
    public int findColumnasMayor(){
        int ancho = inventario.getAlgo(0,4);
        for(int f = 0; f < inventario.getCantFiguras(); ++f){
            if(ancho < inventario.getAlgo( f, 4)){
                ancho = inventario.getAlgo( f , 4);   //lo que se guarda en la columnas de "columnas"
            }
        }
        if(ancho%2 == 0){
            ancho += 1;
        }
        return ancho+2;
    }

    /*
     *  @Funcion: Recorre el inventario y saca el alto mayor. Lo vuelve impar y suma dos
     *  para que las futuras matrices tengan fondo de imagen.
     *  @Return: Entero que refleja la dimencion en y de las futuras matrices recortadas.
     */
    public int findFilasMayor(){
        int alto = 0;
        for(int f=0; f<inventario.getCantFiguras(); ++f){
            if(alto < inventario.getAlgo (f , 5)){
                alto = inventario.getAlgo (f , 5);
            }
        }
        if(alto%2 == 0){
            alto ++;
        }
        return alto+2;
    }

    /*
     *  @Funcion: Metodo de llamado inicial al trabajo del recortador. 
     */
    public void run(){
        for(int n = 0; n < inventario.getCantFiguras(); ++n){
            recortar(inventario.getMatrizControl(n), inventario.getMatrizPintada(n), n );
        }
    }

    /*
     *  @Funcion: Metodo que recorta desde la esquina superior izquiera de la figura, 
     *  hasta, la esquina inferior derecha. Pega lo que recorta en otra matriz y la
     *  guarda donde estaba la matriz pintada sin recortar.
     *  @Param: matriz de control de la figura, matriz pintada de la figura, posicion
     *  n de la figura.
     */
    public void recortar( int[][] control, int[][] pintada, int n){
        int [][] destino = new int [filasMayor][ columnasMayor];
        for (int f = 0; f < destino.length; ++f){
            for(int c = 0; c < destino[0].length; ++c){
                destino[f][c] = 0;
            }
        }
        int filaInicial = 0;
        int columnaInicial = 0;
        int filaFinal = 0;
        int columnaFinal = 0;
        for (int f = 0; f < control.length && filaInicial == 0; ++f){
            for(int c = 0; c < control[0].length && filaInicial ==0; ++c){
                if( control[f][c] == -3 ){
                    filaInicial = f ;
                }
            }
        } 
        for (int c = 0; c < control[0].length && columnaInicial == 0; ++c){
            for(int f = 0; f < control.length && columnaInicial == 0; ++f){
                if( control[f][c] == -3 ){
                    columnaInicial = c;
                }
            }
        } 
        for (int f = (control.length-1) ; f > 0  && filaFinal == 0; --f){
            for(int c = (control[0].length-1); c > 0 && filaFinal ==0; --c){
                if( control[f][c] == -3 ){
                    filaFinal = f + 1;
                }
            }
        } 
        for (int c = (control[0].length-1); c > 0 && columnaFinal == 0; --c){
            for(int f = (control.length-1); f > 0  && columnaFinal == 0; --f){
                if( control[f][c] == -3 ){
                    columnaFinal = c + 1;
                }
            }
        } 
        for (int f = 0; f < destino.length && f <= filaFinal ; ++f){
            for(int c = 0; c < destino[0].length && c <= columnaFinal ; ++c){
                if(valido((filaInicial-1 )+ f,(columnaInicial-1 )+ c, pintada)){
                    destino[f][c] = pintada [(filaInicial-1 )+ f][(columnaInicial-1 )+ c];
                }
            }
        }
        llenarVacio(destino);
        inventario.meterImagenPintada( destino, n);
    }

    /*
     *  @Funcion: Llena aquellos espacios vacios de la matriz recortada que no fueron
     *  llenados porque no pertenecen a la figura, espacio sobrante.
     *  @Param: Matriz a llenar.
     */
    public void llenarVacio( int[][] m){
        int fondo = m[0][0];
        for (int f = 0; f < m.length; ++f){
            for(int c = 0; c < m[0].length; ++c){
                if(m[f][c] == 0){
                    m[f][c] = fondo;
                }
            }
        }
    }

    /*
     *  @Funcion: Se asegura que la casilla siendo accesada deuna matriz sea valida.
     *  @Param: f y c siendo las coordenadas a las que se quiere accesar, la matriz m
     *  es la matriz de referencia.
     *  @Return: Valor booleano que refleja si es valida la posicion o no.
     */
    public boolean valido(int f, int c, int[][]m){
        return m != null && f>= 0 && f< m.length && c>=0 && c < m[0].length;
    }
}
