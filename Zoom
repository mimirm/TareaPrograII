 /* 
 *  @esta clase le hace zoom a las figuras del inventario y las
 *  vuelve a almacenar
 */


public class Zoom{
    public static final int [] SUMA_F = {-1,-1, 0, 1, 1, 1, 0,-1 };
    public static final int [] SUMA_C = {0, 1, 1, 1, 0,-1,-1,-1 };
    public static final int [] ZOOM_F = {1,1,0};
    public static final int [] ZOOM_C = {0,1,1};
    private int [][] zoom;
    private int [][] zoomx;
    private int fondo, contador, altura, anchura;
    private Imagen i;
    private Inventario inventario;

    public Zoom(Inventario inventario){
        this.inventario = inventario;
        contador = 0;
        altura = 0;
        anchura = 0;
    }
    
    
 /*
 *  @Funcion: le hace zoom a cada figura del inventario
 */

    public void run(){
        for(int n = 0; n < inventario.getCantFiguras(); n++){
            System.out.println("antes");
            for(int f = 0; f < inventario.getMatrizPintada(n).length; f++){
                for(int c = 0; c < inventario.getMatrizPintada(n)[0].length; c++){
                    System.out.print(" "+inventario.getMatrizPintada(n)[f][c]); 
                } 
                System.out.println("");

            }
            System.out.println("despues");
            
            inventario.meterImagenPintada(hacerZoom(inventario.getMatrizPintada(n),n),n);
            
            
              for(int f = 0; f < inventario.getMatrizPintada(n).length; f++){
            for(int c = 0; c < inventario.getMatrizPintada(n)[0].length; c++){
            System.out.print(" "+inventario.getMatrizPintada(n)[f][c]); 
            } 
            System.out.println("");

            }
        }
    }
    
    /* 
    * @Funcion: Realiza el zoom a una matriz, tambien verifica cuantas 
    *  veces se le hizo zoom a la figura
    * @Param: recibe la matriz a hacer zoom y en que posicion del inventario se va a añadir.
    * @Return: devuelve la matriz ya con el zoom
    */
    public int[][] hacerZoom(int [][] matriz, int n){
        boolean seguir = true;
        int [][] matrizZoomeada = new int[matriz.length][matriz[0].length];
        for (int f = 0; f < matrizZoomeada.length; ++f){
            for(int c = 0; c < matrizZoomeada[0].length; ++c){
                matrizZoomeada[f][c] = 0;
            }
        }
        int zoom = 0;
        matrizZoomeada= matriz;
        while(seguir){
            try{
                matrizZoomeada = zoomear(matrizZoomeada);
                ++zoom;
            } catch(Exception e){
                seguir = false;
                if(zoom == 0){
                matrizZoomeada = matriz;
                }
                
            }
        }
        inventario.setAlgo(n, 2, (int)(Math.pow(2,zoom)));
        return matrizZoomeada;
    }

    /* 
     * @Funcion: realiza todos los pasos para hacer el zoom
     * @Param: recibe la matriz a hacer zoom
     * @Return: devuelve la matriz ya con zoom 
     */
    public int [][] zoomear(int [][] original){
        zoom = new int [original.length][original[0].length]; 
        zoomx = new int [original.length][original[0].length]; 
        pintarMatriz(zoom,0); 
        fondo = original[0][0];  
        pintarMatriz(zoomx,fondo); 
        buscarFondo(original); 
        altoyancho(original); 
        mover(original, altura, anchura); 
        hacerZoom(); 
        return zoomx; 
    }

     /* 
      * @Funcion: busca la altura y en la columna en la que se encuentra la imagen para poder acomodarla arriba a la izquierda de la matriz
      * @Param: recibe la matriz en la que se desea buscar 
      */
    public void altoyancho(int [][] m){
        int largo = 0;
        int fondo = m[0][0];
        boolean seguir = true;
        for (int o = 0; o < m.length && seguir ; ++o){
            for(int c = 0; c < m[o].length && seguir ; ++c){ 
                if (m[o][c] != fondo ){
                    altura = o;
                    seguir = false;
                }
            } 
        }
        seguir = true;
        anchura = m[0].length;
        for (int o = 0; o < m.length && seguir ; ++o){
            for(int c = 0; c < m[o].length && seguir ; ++c){ 
                if (m[o][c] != fondo && c < anchura ){
                    anchura = c;
                }
            } 
        }
    }

   /* 
    * @Funcion: coloca la figura arriba a la izquierda de la matriz
    * @Return: recibe la matriz a mover, y las posiciones calculadas en altoyancho 
    */
    public void mover(int [][] m, int alto,int  ancho){
        boolean seguir = true;
        int altoguia = alto -1;
        int anchoguia = ancho - 1;
        for (int o = 0; o < m.length && seguir ; ++o){
            for(int c = 0; c < m[o].length && seguir ; ++c){ 
                if (zoom[o][c] == 0 ){  
                    zoom [o][c] = fondo;
                    zoom [o - altoguia][c - anchoguia] = m [o][c];
                }
            } 
        }
    }

     /*
      * @Funcion: llena una matriz con un numero especifico
      * @Return: recibe la matriz a pintar y el numero.  
      */
    public void pintarMatriz(int[][] x , int color){
        for (int contador = 0; contador < x.length; ++contador){
            for(int contador2 = 0; contador2 < x[contador].length; contador2++){
                x[contador][contador2] = color;
            }
        } 
    }
    
    /* 
     * @Funcion: busca en la matriz y llama al metodo recursivo para buscar el fondo de una imagen
     * @Return: recibe la matriz a la que se desea buscar el fondo
     */
    public void buscarFondo(int [][] m){
        boolean buscar = true;
        for (int o = 0; o < m.length ; ++o){
            for(int c = 0; c < m[o].length ; ++c){ 
                if (m[o][c] == fondo && buscar){
                    detectarFondo(o,c, m);
                    buscar = false;
                }
            } 
        }
    }
    
     /* 
      * @Funcion: encuentra el fondo de la imagen de manera recursiva
      * @Param: recibe la primera poscion de la matriz de la imagen y la matriz en la que se desea trabajar. 
      */

    private void detectarFondo(int f, int c, int [][] m){
        for (int o = 0; o < 8 ; o += 2){
            if (esValida(f + SUMA_F[o],c + SUMA_C[o], m) && m[f + SUMA_F[o]][c + SUMA_C[o]] == m[f][c] && zoom[f + SUMA_F[o]][c + SUMA_C[o]] == 0    ){
                zoom[f + SUMA_F[o]][c + SUMA_C[o]] = m[f + SUMA_F[o]][c + SUMA_C[o]];
                detectarFondo(f + SUMA_F[o], c + SUMA_C[o], m);
            }
        }
    }
    
    /*
     * @Función: verifica que la poscion de la matriz lienzo sea valida
     * @Param: recibe la posicion exacta
     * @Return: devuelve un boolean informando si es valida o no  
     */
    public boolean esValida(int f,int c, int[][] m){
        return m!=null && f >=0 && f < m.length && m[f]!=null && c >=0 && c < m[f].length;
    }
    
   /* 
    * @Funcion: imprime en pantalla una matriz
    * @Param: recibe la matriz que se desea imprimir   
    */
    public void toString(int[][] matriz){
        for(int f = 0; f < matriz.length; f++){
            for(int c = 0; c < matriz[f].length; c++){
                System.out.print(" "+matriz[f][c]); 
            } 
            System.out.println("");
        }
    }
    
   /* 
    * @Funcion: realiza las operaciones para hacer el zoom.
    */
    public void hacerZoom(){
        for (int o = 0; o < zoom.length ; ++o){
            for(int c = 0; c < zoom[o].length ; ++c){ 
                if (zoom[o][c] != fondo ){
                    zoomx [o * 2][c * 2] = zoom[o][c]; 
                    pintar(o * 2, c * 2, zoomx, zoom [o][c]);
                }
            } 
        }         
    }

   /* @Funcion: pinta las tres casillas que rodean al punto que se multiplico en el zoom
    * @Param: recibe el putno, la matriz en la que se trabaja y de que color se desea pintar  
    */
    public void pintar(int f, int c, int [][] m, int color){
        for(int i=0; i < 3; ++i){
            m[f+ZOOM_F[i]][c+ZOOM_C[i]] = color;
        }
    }
}
