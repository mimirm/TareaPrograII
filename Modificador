/*
 * este bro recorta, centra y hace zoom
 */
public class Modificador{
    public static final int [] SUMA_F = { -1,-1, 0, 1, 1, 1, 0,-1 };
    public static final int [] SUMA_C = {  0, 1, 1, 1, 0,-1,-1,-1 };
    private Inventario inventario;
    private int filasMayor, columnasMayor;
    private Zoom zoomeador;
    private int zoom;
    public Modificador (Inventario inventario){
        this.inventario = inventario;
        zoomeador = new Zoom();
        filasMayor = findFilasMayor();
        columnasMayor = findColumnasMayor();
        zoom = 0;
    }
   public void recortarMatrices(){
        for(int n = 0; n < inventario.getCantFiguras(); ++n){
            recortar(inventario.getMatrizControl(n), inventario.getMatrizPintada(n), n );
        }
    }
    
    public void recortar( int[][] control, int[][] pintada, int n){
        int [][] destino = new int [filasMayor][ columnasMayor];
        for (int f = 0; f < destino.length; ++f){
            for(int c = 0; c < destino[0].length; ++c){
               destino[f][c] = 0;
            }
        }
        int filaInicial = 0;
        int columnaInicial = 0;
        int filaFinal = 0;
        int columnaFinal = 0;
        for (int f = 0; f < control.length && filaInicial == 0; ++f){
            for(int c = 0; c < control[0].length && filaInicial ==0; ++c){
                if( control[f][c] == -3 ){
                    filaInicial = f - 1;
                }
            }
        } 
        for (int c = 0; c < control[0].length && columnaInicial == 0; ++c){
            for(int f = 0; f < control.length && columnaInicial == 0; ++f){
               if( control[f][c] == -3 ){
                    columnaInicial = c - 1;
                }
            }
        } 
        for (int f = control.length ; f < 0  && filaFinal == 0; --f){
            for(int c = 0; c < control[0].length && filaInicial ==0; ++c){
                if( control[f][c] == -3 ){
                    filaFinal = f + 1;
                }
            }
        } 
        for (int c = control[0].length; c < 0 && columnaInicial == 0; --c){
            for(int f = 0; f < control.length && columnaInicial == 0; ++f){
               if( control[f][c] == -3 ){
                    columnaFinal = c + 1;
                }
            }
        } 
        for (int f = 0; f < destino.length && f < filaFinal; ++f){
            for(int c = 0; c < destino[0].length && c < columnaFinal ; ++c){
               destino[f][c] = pintada [filaInicial + f][columnaInicial + c];
            }
        }
        //Para prueba
        for(int f = 0; f < destino.length; f++){
            for(int c = 0; c < destino[f].length; c++){
                System.out.print(" "+destino[f][c]); 
            } 
            System.out.println("");
        }

        inventario.meterImagenPintada( destino, n);
    }

    public int findColumnasMayor(){
        int ancho = inventario.getAlgo(0,4);
        System.out.println(ancho);
        for(int f = 0; f < inventario.getCantFiguras(); ++f){
            if(ancho < inventario.getAlgo( f, 4)){
                System.out.println("Entra a findAnchoMAyor");
                ancho = inventario.getAlgo( f , 4);   //lo que se guarda en la columnas de "columnas"
            }
        }
        if(ancho%2 == 0){
            ancho += 1;
        }
        System.out.println(ancho+2);
        return ancho+2;
    }

    public int findFilasMayor(){
        int alto = 0;
        for(int f=0; f<inventario.getCantFiguras(); ++f){
            if(alto < inventario.getAlgo (f , 5)){
                alto = inventario.getAlgo (f , 5);
            }
        }
        if(alto%2 == 0){
            alto ++;
        }
        return alto+2;
    }
    
    public int [][] hacerZoom(int [][] matriz){
        boolean seguir = true;
        int [][] matrizZoomeada = matriz;
        zoom = 0;
        while(seguir){
            try{
                matrizZoomeada = zoomeador.zoomear(matriz);
                ++zoom;
            } catch(Exception e){
                seguir = false;
            }
        }
        return matrizZoomeada;
    }
    
    public void run(){
        recortarMatrices();
    }
}
